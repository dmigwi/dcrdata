{{define "agenda"}}
<!DOCTYPE html>
<html lang="en">
    {{template "html-head" printf "Decred Vote Agenda Pages"}}
    <body>
        {{template "navbar" .}}
        {{with .Ai}}
        <div class="container">
            <div class="row justify-content-between">
                <div class="col-md-7 col-sm-6 d-flex">
                    <h4 class="mb-2">{{.Id}}
                    </h4>
                </div>
            </div>
            <div class="row justify-content-between">
                <div class="col-md-7 col-sm-6 d-flex">
                    <table class="">
                        <tr>
                            <td class="text-right pr-2 lh1rem vam nowrap xs-w117">Description</td>
                            <td>
                                <span class="hash break-word  lh1rem">{{.Description}}</span>
                            </td>
                        </tr>
                        <tr>
                            <td class="text-right pr-2 lh1rem vam nowrap xs-w117">StartTime</td>
                            <td>
                                <span class="hash break-word  lh1rem">{{TimeConversion .StartTime}}</span>
                            </td>
                        </tr>
                        <tr>
                            <td class="text-right pr-2 lh1rem vam nowrap xs-w117">ExpireTime</td>
                            <td>
                                <span class="hash break-word  lh1rem">{{TimeConversion .ExpireTime}}</span>
                            </td>
                        </tr>
                    </table>
                </div>
                <div class="col-md-5 col-sm-6 d-flex">
                    <table class="">
                        <tr>
                            <td class="text-right lh1rem pr-2 xs-w117">Status</td>
                            <td class="lh1rem" style="min-width: 178px;">
                                <span class="hash break-word  lh1rem">{{.Status}}</span>
                            </td>
                        </tr>
                        <tr>
                            <td class="text-right lh1rem pr-2 xs-w117">QuorumProgress</td>
                            <td class="lh1rem" style="min-width: 178px;">
                                <span class="hash break-word  lh1rem">{{.QuorumProgress}}</span>
                            </td>
                        </tr>
                        <tr>
                            <td class="text-right lh1rem pr-2 xs-w117">VoteVersion</td>
                            <td class="lh1rem" style="min-width: 178px;">
                                <span class="hash break-word  lh1rem">{{.VoteVersion}}</span>
                            </td>
                             <tr>
                            <td class="text-right pr-2 lh1rem vam nowrap xs-w117">Mask</td>
                            <td>
                                <span class="hash break-word  lh1rem">{{.Mask}}</span>
                            </td>
                        </tr>
                        </tr>
                    </table>
                </div>
            </div>
            {{if .Choices}}
            <table class="table table-mono-cells table-sm striped">
                <thead>
                    <th>ID</th>
                    <th>Description</th>
                    <th>Bits</th>
                    <th>IsAbstain</th>
                    <th>IsNo</th>
                    <th>Count</th>
                    <th>Progress</th>
                </thead>
                {{range $i, $v := .Choices}}
                {{with $v}}
                <thead>
                    <tr>
                        <td class="text-left">{{.Id}}</td>
                        <td class="text-left">{{.Description}}</td>
                        <td class="text-left">{{.Bits}}</td>
                        <td class="text-left">{{.IsAbstain}}</td>
                        <td class="text-left">{{.IsNo}}</td>
                        <td class="text-left">{{.Count}}</td>
                        <td class="text-left">{{.Progress}}</td>
                    </tr>
                </thead>
                {{end}}
                {{end}}
            </table>
            {{end}}
            <div id="lineGraph" style="width:100%; height:450px; margin:0 auto;"></div>

            <br>
            <div id="barGraph" style="width:100%; height:300px; margin:0 auto;"></div>
            </div>
        </div>
        {{end}}

        <script>
            var c = {{.ChartDataByTime}};
            var b = {{.ChartDataByBlock}};
            var Y = [c.no, c.abstain, c.yes ];
            var YData = [b.no, b.abstain, b.yes];
            var gmargin = {l:70, r:10, b:40, t:35, pad:4};

            var colors = ['red', 'orange', 'rgb(0,153,0)'];
            var traces = [{name: 'No'},  {name: 'Abstain'},  {name: 'Yes'}];
            var modalBar = {displaylogo: false,
            modeBarButtonsToRemove: ['pan2d', 'lasso2d', 'sendDataToCloud']}

            function getPercentage(items){
                elem = []
                var text = c.total.map((val, i) => {
                    elem.push("("+((100*items[i])/val).toFixed(2)+")%")
                });
                return elem
            }

            function stackedArea(traces, yData, dtype) {
                traces.forEach(function(trace, i) {
                    trace.y = yData[i].slice();
                    if (dtype === 0) {
                        trace.hoverinfo = "all";
                        trace.text = getPercentage(yData[i].slice());
                        trace.x = c.time;
                        trace.line = { color: colors[i], width: 1};
                    } else {
                        trace.x = b.height;
                        trace.line = { color: colors[i], width: 0.7};
                    }
                    trace.visible = true;
                    trace.fill = 'tonexty'
                });

                var tracesVisible = traces.filter(function(trace) {
                    return trace.visible === true;
                });

                for(var i = 1; i < tracesVisible.length; i++) {
                    var trace0 = tracesVisible[i-1];
                    var trace1 = tracesVisible[i];
                    var len = Math.min(trace0.y.length, trace1.y.length);

                    for(var j = 0; j < len; j++) {
                        trace1.y[j] += trace0.y[j];
                    }
                }
                return traces;
            }

            var layout = {
            title: 'Cummulative Vote Choices Cast Per Day',
            xaxis : {
                title: 'Date',
                rangeslider: {}
                },
            yaxis : {title: 'Cummulative Vote Choices Cast'},
            margin: gmargin
            };

            var graphDiv = document.getElementById("lineGraph");
            Plotly.react(graphDiv, stackedArea(traces, Y, 0), layout, modalBar);

            var d3 = Plotly.d3;
            graphDiv.on('plotly_afterplot', function(d) {
                d3.selectAll('.legendtoggle').each(function(d, i) {

                    d3.select(this).on('click', function() {
                        var traceClicked = traces[2 - i];

                        traceClicked.visible = (traceClicked.visible === true) ?
                            'legendonly' :
                            true;

                        stackedArea(traces, Y, 0);

                        Plotly.redraw(graphDiv);
                    });
                });
            });

            var blockTraces = JSON.parse(JSON.stringify(traces));
            var newlayout = {
            title: 'Vote Choices Cast Per Block',
            xaxis : {
                title: 'Block Height',
                exponentformat: 'none',
                rangeslider: {}
                },
            yaxis : {title: 'Votes Choices Cast per Block'},
            margin: gmargin
            };

            var newgraph = document.getElementById("barGraph");
            Plotly.react(newgraph, stackedArea(blockTraces, YData, 1), newlayout, modalBar);
        </script>

        {{template "footer" . }}
    </body>
</html>
{{end}}
